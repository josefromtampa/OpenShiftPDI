{
  "_args": [
    [
      {
        "raw": "resolve@https://registry.npmjs.org/resolve/-/resolve-0.2.3.tgz",
        "scope": null,
        "escapedName": "resolve",
        "name": "resolve",
        "rawSpec": "https://registry.npmjs.org/resolve/-/resolve-0.2.3.tgz",
        "spec": "https://registry.npmjs.org/resolve/-/resolve-0.2.3.tgz",
        "type": "remote"
      },
      "/Users/josej/OpenShiftCustom/pdi2test/node_modules/egnyte-js-sdk/node_modules/grunt-dependo/node_modules/dependo/node_modules/madge"
    ]
  ],
  "_from": "resolve@https://registry.npmjs.org/resolve/-/resolve-0.2.3.tgz",
  "_id": "resolve@0.2.3",
  "_inCache": true,
  "_location": "/egnyte-js-sdk/grunt-dependo/dependo/madge/resolve",
  "_phantomChildren": {},
  "_requested": {
    "raw": "resolve@https://registry.npmjs.org/resolve/-/resolve-0.2.3.tgz",
    "scope": null,
    "escapedName": "resolve",
    "name": "resolve",
    "rawSpec": "https://registry.npmjs.org/resolve/-/resolve-0.2.3.tgz",
    "spec": "https://registry.npmjs.org/resolve/-/resolve-0.2.3.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/egnyte-js-sdk/grunt-dependo/dependo/madge"
  ],
  "_resolved": "https://registry.npmjs.org/resolve/-/resolve-0.2.3.tgz",
  "_shasum": "f1eb7fb76436f91d87fd19c5f973fe7d506f6571",
  "_shrinkwrap": null,
  "_spec": "resolve@https://registry.npmjs.org/resolve/-/resolve-0.2.3.tgz",
  "_where": "/Users/josej/OpenShiftCustom/pdi2test/node_modules/egnyte-js-sdk/node_modules/grunt-dependo/node_modules/dependo/node_modules/madge",
  "author": {
    "name": "James Halliday",
    "email": "mail@substack.net",
    "url": "http://substack.net"
  },
  "bugs": {
    "url": "https://github.com/substack/node-resolve/issues"
  },
  "dependencies": {},
  "description": "A more hookable require.resolve() implementation",
  "devDependencies": {
    "tap": "~0.2.4"
  },
  "directories": {
    "lib": ".",
    "example": "example",
    "test": "test"
  },
  "engines": {
    "node": ">=0.4.0"
  },
  "homepage": "https://github.com/substack/node-resolve#readme",
  "keywords": [
    "resolve",
    "require",
    "node",
    "module"
  ],
  "license": "MIT",
  "main": "index.js",
  "name": "resolve",
  "optionalDependencies": {},
  "readme": "resolve\n=======\n\nImplements the [node `require.resolve()`\nalgorithm](http://nodejs.org/docs/v0.4.8/api/all.html#all_Together...)\nexcept you can pass in the file to compute paths relatively to along with your\nown `require.paths` without updating the global copy (which doesn't even work in\nnode `>=0.5`).\n\n[![build status](https://secure.travis-ci.org/substack/node-resolve.png)](http://travis-ci.org/substack/node-resolve)\n\nmethods\n=======\n\nvar resolve = require('resolve');\n\nresolve.sync(pkg, opts)\n-----------------------\n\nSynchronously search for the package/filename string `pkg`\naccording to the [`require.resolve()`\nalgorithm](http://nodejs.org/docs/v0.4.8/api/all.html#all_Together...)\nfor `X=pkg` and `Y=opts.basedir`.\n\nDefault values for `opts`:\n\n````javascript\n{\n    paths : [],\n    basedir : __dirname,\n    extensions : [ '.js' ],\n    readFileSync : fs.readFileSync,\n    isFile : function (file) {\n        return path.existSync(file) && fs.statSync(file).isFile()\n    }\n}\n````\n\nOptionally you can specify a `opts.packageFilter` function to map the contents\nof `JSON.parse()`'d package.json files.\n\nIf nothing is found, all of the directories in `opts.paths` are searched.\n\nresolve.isCore(pkg)\n-------------------\n\nReturn whether a package is in core.\n",
  "readmeFilename": "README.markdown",
  "repository": {
    "type": "git",
    "url": "git://github.com/substack/node-resolve.git"
  },
  "scripts": {
    "test": "tap test/*.js"
  },
  "version": "0.2.3"
}
