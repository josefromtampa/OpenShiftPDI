{
  "_args": [
    [
      {
        "raw": "pinkyswear@https://registry.npmjs.org/pinkyswear/-/pinkyswear-2.2.2.tgz",
        "scope": null,
        "escapedName": "pinkyswear",
        "name": "pinkyswear",
        "rawSpec": "https://registry.npmjs.org/pinkyswear/-/pinkyswear-2.2.2.tgz",
        "spec": "https://registry.npmjs.org/pinkyswear/-/pinkyswear-2.2.2.tgz",
        "type": "remote"
      },
      "/Users/josej/OpenShiftCustom/pdi2test/node_modules/egnyte-js-sdk"
    ]
  ],
  "_from": "pinkyswear@https://registry.npmjs.org/pinkyswear/-/pinkyswear-2.2.2.tgz",
  "_id": "pinkyswear@2.2.2",
  "_inCache": true,
  "_location": "/egnyte-js-sdk/pinkyswear",
  "_phantomChildren": {},
  "_requested": {
    "raw": "pinkyswear@https://registry.npmjs.org/pinkyswear/-/pinkyswear-2.2.2.tgz",
    "scope": null,
    "escapedName": "pinkyswear",
    "name": "pinkyswear",
    "rawSpec": "https://registry.npmjs.org/pinkyswear/-/pinkyswear-2.2.2.tgz",
    "spec": "https://registry.npmjs.org/pinkyswear/-/pinkyswear-2.2.2.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/egnyte-js-sdk"
  ],
  "_resolved": "https://registry.npmjs.org/pinkyswear/-/pinkyswear-2.2.2.tgz",
  "_shasum": "9595f6a18fc1aa07b68466c3eece1a610c093bef",
  "_shrinkwrap": null,
  "_spec": "pinkyswear@https://registry.npmjs.org/pinkyswear/-/pinkyswear-2.2.2.tgz",
  "_where": "/Users/josej/OpenShiftCustom/pdi2test/node_modules/egnyte-js-sdk",
  "author": {
    "name": "Tim Jansen"
  },
  "bugs": {
    "url": "https://github.com/timjansen/PinkySwear.js/issues"
  },
  "dependencies": {
    "promises-aplus-tests": "~2.0.4"
  },
  "description": "Minimalistic Promises/A+ implementation, <500 bytes",
  "devDependencies": {
    "mocha": "^1.18.2"
  },
  "gitHead": "44f973cb770ff232b35227de9873440810d6e0aa",
  "homepage": "https://github.com/timjansen/PinkySwear.js#readme",
  "keywords": [
    "promises",
    "promises-aplus"
  ],
  "license": "Public Domain",
  "main": "pinkyswear.js",
  "name": "pinkyswear",
  "optionalDependencies": {},
  "readme": "<a href=\"http://promisesaplus.com/\">\n    <img src=\"http://promisesaplus.com/assets/logo-small.png\" alt=\"Promises/A+ logo\"\n         title=\"Promises/A+ 1.1 compliant\" align=\"right\" />\n</a>\nPinkySwear.js 2.2.2\n====================\n\nPinkySwear is a very small implementation of the Promises/A+ specification. After compilation with the\nGoogle Closure Compiler and gzipping it weighs less than 500 bytes. It is originally based on the implementation for \n<a href=\"http://minifiedjs.com\">Minified.js</a> and is for embedding. In other words, you can use it as a\nlightweight dependency for your library if you need to return a promise. It is not intended as a stand-alone\nlibrary for more complex applications, and therefore does not support assimilation of other promises.\nMinified's implementation does support assimilation though.\n \n## Release History ##\n\n#####Version 2.2.2 released July 30, 2014\n- Support extensions for promises created using then() (thanks, Zbyszek Tenerowicz)\n\n#####Version 2.2.1 released July 17, 2014\n- Added extend function to constructor (thanks, Zbyszek Tenerowicz)\n\n#####Version 2.1 released June 6, 2014\n- Removed always() and error(), since they were not in the spirit of a minimal implementation.\n- Updated Promises/A+ Compliance Test to 2.0.4\n\n#####Version 2.0.2, released May 10, 2014\n- Use setImmediate() on platforms that support it (thanks, Carl-Erik Kopseng)\n\n#####Version 2.0.1, released Apr 3, 2014\n- Fixed PinkySwear on IE8 which can't handle apply() without arguments (thanks, Luis Nabais)\n- Fix and test case for PinkySwear's multi-arguments extension (thanks, Carl-Erik Kopseng)\n\n#####Version 2.0, released Feb 10, 2014\nPasses Promises/A+ Compliance Test 2.0.3. Allows obtaining state by calling promise function without arguments.\n\n#####Version 1.0, released Feb 09, 2013\nFirst release. Passes Promises/A+ Compliance Test 1.10.0 with one exception (PinkySwear is function-based, which is\nallowed in the spec, but not in the old test suite).\n \n \n## Stats ##\n\n<table>\n<tr><th>Name</th><th>Type</th><th>Size</th></tr>\n<tr><td>pinkyswear.js</td><td>Source code</td><td>about 4kB</td></tr>\n<tr><td>pinkyswear.min.js</td><td>Closure /w Advanced Optimization</td><td>828 bytes</td></tr>\n<tr><td>pinkyswear.min.js.gz</td><td>Closure + GZip'd</td><td>470 bytes</td></tr>\n</table>\n\n## How to Include / Node.js ##\n\nYou can install PinkySwear.js using npm:\n> npm install pinkyswear\n\nUse require() to get the initial function:\n> var pinkySwear = require('pinkyswear');\n\n\n## How to Include / Browser ##\n\nTo use PinkySwear in a browser, just include it with a script tag. You probably want to use the minified version in a browser:\n> &lt;script type=\"text/javascript\" src=\"path/to/pinkyswear.min.js\">&lt;/script>\n\n \n## API ##\n \nPinkySwear has just three functions.\n\nTo create a new promise in pending state, call pinkySwear():\n>         var promise = pinkySwear();\n \nThe returned object has a Promises/A+ compatible then() implementation:\n>         promise.then(function(value) { alert(\"Success!\"); }, function(value) { alert(\"Failure!\"); });\n \nThe promise returned by pinkySwear() is a function itself. To fulfill the promise, call the function with true as first argument and\nan optional array of values to pass to the then() handler. By putting more than one value in the array, you can pass more than one\nvalue to the then() handlers. Here an example to fulfill a promise, this time with only one argument: \n>         promise(true, [42]);\n \nWhen the promise has been rejected, call it with false as first argument:\n>         promise(false, [6, 6, 6]);\n\nYou can obtain the promise's current state by calling the function without arguments. It will be true if fulfilled,\nfalse if rejected, and otherwise undefined.\n>\t\t  var state = promise();\n\nIt is possible to extend PinkySwear's promise object with custom methods by specifying an extend function:\n>         function addHello(prom) { \n>             prom.sayHello = function() { console.log('hello'); }; \n>             return prom; \n>         }\n>         var promise = pinkySwear(addHello);\n\n \n\n## Licensing ##\n\nPublic Domain. Use, modify and distribute it any way you like. No attribution required.\nTo the extent possible under law, Tim Jansen has waived all copyright and related or neighboring rights to PinkySwear.\nPlease see http://creativecommons.org/publicdomain/zero/1.0/\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/timjansen/PinkySwear.js.git"
  },
  "scripts": {
    "test": "node promise-test.js pinkyswear.js; node promise-test.js pinkyswear.min.js; mocha pinkyswear-additional-functionality-test.js"
  },
  "version": "2.2.2"
}
